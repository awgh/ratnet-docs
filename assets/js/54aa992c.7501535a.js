"use strict";(self.webpackChunkratnet=self.webpackChunkratnet||[]).push([[43],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||a;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6172:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={sidebar_position:2},l="Node Interface",c={unversionedId:"api/nodes/api",id:"api/nodes/api",title:"Node Interface",description:"To create a new Node, the Node interface must be implemented.  This is the only interface required for a new Node.",source:"@site/docs/api/nodes/api.md",sourceDirName:"api/nodes",slug:"/api/nodes/api",permalink:"/ratnet-docs/docs/api/nodes/api",draft:!1,editUrl:"https://github.com/awgh/ratnet-docs/tree/gh-pages/docs/api/nodes/api.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Nodes",permalink:"/ratnet-docs/docs/api/nodes/intro"},next:{title:"Connection Policies",permalink:"/ratnet-docs/docs/api/policies/intro"}},d={},u=[{value:"RunPolicy",id:"runpolicy",level:2},{value:"Stop",id:"stop",level:2},{value:"GetTransport",id:"gettransport",level:2},{value:"MarshallJSON",id:"marshalljson",level:2}],p={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"node-interface"},"Node Interface"),(0,a.kt)("p",null,"To create a new Node, the Node interface must be implemented.  This is the only interface required for a new Node."),(0,a.kt)("p",null,"In this section, we'll go through each of the functions in the Node interface."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'"','"':!0},"type Node interface {\n\n    // Local Access Only (Not Exposed Through RPC API)\n    Start() error\n    Stop()\n    GetPolicies() []Policy\n    SetPolicy(policies ...Policy)\n    Router() Router\n    SetRouter(router Router)\n    GetChannelPrivKey(name string) (string, error)\n    Handle(msg Msg) (bool, error)\n    Forward(msg Msg) error\n    IsRunning() bool\n\n    // Chunking\n    // AddStream - inform node of receipt of a stream header\n    AddStream(streamID uint32, totalChunks uint32, channelName string) error\n    // AddChunk - inform node of receipt of a chunk\n    AddChunk(streamID uint32, chunkNum uint32, data []byte) error\n\n    // FlushOutbox : Empties the outbox of messages older than maxAgeSeconds\n    FlushOutbox(maxAgeSeconds int64)\n\n    // RPC Entrypoints\n\n    // AdminRPC :\n    AdminRPC(transport Transport, call RemoteCall) (interface{}, error)\n\n    // PublicRPC :\n    PublicRPC(transport Transport, call RemoteCall) (interface{}, error)\n\n    // PUBLIC API\n    // Functions that are safe for non-authenticated calls / open Internet\n\n    // ID : get the routing public key (1)\n    ID() (bc.PubKey, error)\n\n    // Dropoff : Deliver a batch of messages to this node (2)\n    Dropoff(bundle Bundle) error\n\n    // Pickup : Get outgoing messages from this node (3)\n    Pickup(routingPub bc.PubKey, lastTime int64, maxBytes int64, channelNames ...string) (Bundle, error)\n\n    //\n\n    // Admin API Functions\n    // Functions that are NOT SAFE for non-authenticated access from the Internet\n\n    // CID : Return content key (16)\n    CID() (bc.PubKey, error)\n\n    // GetContact : Return a contact by name (17)\n    GetContact(name string) (*Contact, error)\n    // GetContacts : Return a list of contacts (18)\n    GetContacts() ([]Contact, error)\n    // AddContact : Add or Update a contact key (19)\n    AddContact(name string, key string) error\n    // DeleteContact : Remove a contact (20)\n    DeleteContact(name string) error\n\n    // GetChannel : Return a channel by name (21)\n    GetChannel(name string) (*Channel, error)\n    // GetChannels : Return list of channels known to this node (22)\n    GetChannels() ([]Channel, error)\n    // AddChannel : Add a channel to this node's database (23)\n    AddChannel(name string, privkey string) error\n    // DeleteChannel : Remove a channel from this node's database (24)\n    DeleteChannel(name string) error\n\n    // GetProfile : Retrieve a Profile by name (25)\n    GetProfile(name string) (*Profile, error)\n    // GetProfiles : Retrieve the list of profiles for this node (26)\n    GetProfiles() ([]Profile, error)\n    // AddProfile : Add or Update a profile to this node's database (27)\n    AddProfile(name string, enabled bool) error\n    // DeleteProfile : Remove a profile from this node's database (28)\n    DeleteProfile(name string) error\n    // LoadProfile : Load a profile key from the database as the content key (29)\n    LoadProfile(name string) (bc.PubKey, error)\n\n    // GetPeer : Retrieve a peer by name (30)\n    GetPeer(name string) (*Peer, error)\n    // GetPeers : Retrieve this node's list of peers (31)\n    GetPeers(group ...string) ([]Peer, error)\n    // AddPeer : Add or Update a peer configuration (32)\n    AddPeer(name string, enabled bool, uri string, group ...string) error\n    // DeletePeer : Remove a peer from this node's database (33)\n    DeletePeer(name string) error\n\n    // Send : Transmit a message to a single key (34) <deprecated>\n    Send(contactName string, data []byte, pubkey ...bc.PubKey) error\n    // SendChannel : Transmit a message to a channel (35) <deprecated>\n    SendChannel(channelName string, data []byte, pubkey ...bc.PubKey) error\n\n    // SendMsg : Transmit a message object (36)\n    SendMsg(msg Msg) error\n\n    //  End of Admin API Functions\n\n    //\n\n    // Channels\n    // In : Returns the In channel of this node\n    In() chan Msg\n    // Out : Returns the Out channel of this node\n    Out() chan Msg\n    // Events : Returns the Err channel of this node\n    Events() chan Event\n\n    ImportExport\n}\n\ntype ImportExport interface {\n    // Import node from JSON\n    Import(jsonConfig []byte) error\n    // Export node to JSON\n    Export() ([]byte, error)\n}\n")),(0,a.kt)("h2",{id:"runpolicy"},"RunPolicy"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'"','"':!0},"    RunPolicy() error\n")),(0,a.kt)("p",null,"Start running this policy."),(0,a.kt)("h2",{id:"stop"},"Stop"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'"','"':!0},"    Stop()\n")),(0,a.kt)("p",null,"Stop running this policy."),(0,a.kt)("h2",{id:"gettransport"},"GetTransport"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'"','"':!0},"    GetTransport() Transport\n")),(0,a.kt)("p",null,"Returns the Transport associated with this policy."),(0,a.kt)("h2",{id:"marshalljson"},"MarshallJSON"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"MarshalJSON() (b []byte, e error)\n")),(0,a.kt)("p",null,"Serialize this type to JSON."))}m.isMDXComponent=!0}}]);